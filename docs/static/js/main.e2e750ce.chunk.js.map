{"version":3,"sources":["stores/SignStore.ts","qrcode/QRCode.tsx","user-profile/UserProfile.tsx","interfaces/i-exame.ts","stores/ExamStore.ts","stores/SkillStore.ts","exam-analysis/ExamAnalysis.tsx","exam/ExamAdd.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useSign","_useState","useState","_useState2","Object","slicedToArray","idUser","setIdUser","useEffect","setTimeout","Sign","createContext","QRCodeDialog","_ref","url","urldefault","concat","window","location","host","react_default","a","createElement","Dialog","fullScreen","typeof","aria-labelledby","open","Fragment","DialogTitle","id","DialogContent","style","display","justifyContent","lib_default","size","value","DialogActions","react_router_dom","className","to","useStyles","makeStyles","theme","createStyles","iconStyle","color","UserProfile","logged","setLogged","Head","Body","classes","AppBar","position","Toolbar","Link","marginRight","component","Icon","Avatar","Typography","flexGrow","paddingLeft","variant","IconButton","aria-label","edge","encodeURIComponent","Container","maxWidth","ELevel","useExam","skills","exams","setExams","_useState3","_useState4","stage","setStage","reset","create","Promise","resolve","readData","data","JSON","parse","localStorage","getItem","sort","currExam","nextExam","date","virtualTests","_loop2","x","exam","forEach","_ref5","tests","filter","test","idSkill","idTool","level","_ref6","tools","exams1Res","Math","trunc","countTools","snapshot","baseCalc","levelLength","keys","length","reduce","prev","key","levelWeight","getScoreByIdSkill","scores","toConsumableArray","includeExams","pexams","nexamStr","stringify","setItem","then","summarize","map","skill","subject","name","fullMark","examsBySkill","objectSpread","push","nexams","examIndex","findIndex","_ref2","Date","getTime","remove","idExam","_ref3","splice","getSnapshot","_loop","_ref4","commit","oldStage","dateTime","Exam","useSkill","setSkills","fetch","rs","json","Skill","ExamAnalysis","useContext","Provider","_useContext2","accept","multiple","type","onChange","target","reader","FileReader","onload","readyState","error","alert","result","res","console","log","readAsText","files","htmlFor","download","href","selectedExam","setSelectedExam","formatDate","_toISOString$substrin","toISOString","substring","split","_toISOString$substrin2","year","month","day","legendClick","even","dataKey","width","height","Consumer","es6","margin","top","right","left","bottom","outerRadius","angle","domain","floor","random","toString","stroke","fill","fillOpacity","onClick","Box","alignItems","Button","react_router","selectEmpty","marginTop","headInput","backgroundColor","border","fontSize","fontWeight","ExamAdd","ExamAdd_ExamForm","ExamForm","_useContext3","examCount","_React$useState","React","_React$useState2","selectedSkill","setSelectedSkill","icons","setTestItem","toolLevel","_stage$tests","testIndex","levels","Paper","square","Tabs","event","newValue","centered","index","Tab","label","icon","List","find","description","tool","BREAKTHROUGH","skillById","Test","toolName","selectedLevel","setLevel","handleChangeLevel","_ref7","Number","ListItem","flexDirection","flexWrap","Checkbox","title","checkedIcon","checked","Divider","redirect","setRedirect","pdate","dateFormated","_value$split","_value$split2","dateValue","App","CssBaseline","path","exact","render","user_profile_UserProfile","exam_analysis_ExamAnalysis","params","match","QRCode","decodeURIComponent","exam_ExamAdd","LinearProgress","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAMMA,EAAU,WAAM,IAAAC,EACUC,mBAAS,IADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACHI,EADGJ,EAAA,GAMlB,OAJAK,oBAAU,WACPC,WAAW,kBAAMF,EAAU,QAAQ,MACpC,IAEK,CAAED,WAGPI,EAAOC,wBAAc,mECcZC,EArBM,SAAAC,GAAwB,IAAtBC,EAAsBD,EAAtBC,IACbC,EAAU,WAAAC,OAAcC,OAAOC,SAASC,MAA9BH,OAAqCF,GACrD,OACQM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,YAAU,EAACC,OAAO,GAAGC,kBAAgB,oBAAoBC,MAAI,GACjEP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAaC,GAAG,uBACXf,GAELK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAeC,MAAO,CAACC,QAAS,OAAQC,eAAgB,WACpDd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQe,KAAM,IAAKC,MAAOtB,KAE9BK,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,UAAU,mDAAmDC,GAAI3B,GAAvE,uGCXlB4B,EAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,UAAW,CACPC,MAAM,eAMRC,EAAgH,SAAhHA,IAAsH,IAAA/C,EAC5FC,oBAAS,GADmFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjHgD,EADiH9C,EAAA,GACzG+C,EADyG/C,EAAA,GAOxH,OAJK8C,GACDC,GAAU,GAIV9B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACIR,EAAAC,EAAAC,cAAC0B,EAAYG,KAAb,MACA/B,EAAAC,EAAAC,cAAC0B,EAAYI,KAAb,QA+CZJ,EAAYG,KA1CC,WACT,IAAME,EAAUX,IAChB,OACItB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQC,SAAS,QAAQR,MAAM,WAC3B3B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQzB,MAAO,CAAC0B,YAAY,OAAQC,UAAWF,IAAMhB,GAAG,KACpDrB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,uBAEJ1B,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,cAGJxC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAY9B,MAAO,CAAE+B,SAAU,EAAGhB,MAAM,UAAWiB,YAAY,OAAQC,QAAQ,aAA/E,QAIA7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACInB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACL3B,GAAE,gBAAAzB,OAAkBqD,mBAAmB,cACvCV,UAAWF,KAEXrC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,aAoBpBE,EAAYI,KAbC,WACT,OACIhC,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,SAAS,MAChBnD,EAAAC,EAAAC,cAAA,mBAWD0B,IC9EHwB,ED8EGxB,yDC9EHwB,yLC0BZ,IAAMC,EAAU,SAACC,GAAqB,IAAAzE,EACRC,mBAAS,IADDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3B0E,EAD2BxE,EAAA,GACpByE,EADoBzE,EAAA,GAAA0E,EAER3E,mBAAS,IAFD4E,EAAA1E,OAAAC,EAAA,EAAAD,CAAAyE,EAAA,GAE3BE,EAF2BD,EAAA,GAEpBE,EAFoBF,EAAA,GA2D5BG,EAAQ,WAEV,OADAD,EAAS5E,OAAO8E,OAAO,KAChBC,QAAQC,SAAQ,IA8CrBC,EAAW,WACb,IAAMC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAClEJ,EAAKK,KAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASC,KAAOF,EAASE,OAiB3D,IAfA,IAaMC,EAA6B,GAjBhBC,EAAA,SAmBXC,GACJ,IAAMC,EAAOZ,EAAKW,GAElBvB,EAAOyB,QAAQ,SAAAC,GAAU,IAARtE,EAAQsE,EAARtE,GACbiE,EAAajE,GAAMiE,EAAajE,IAAO,GACpCoE,EAAKG,OACJH,EACKG,MACAC,OAAO,SAACC,GAAD,OAAUA,EAAKC,UAAY1E,IAAIqE,QAAQ,SAAAI,GAC3CR,EAAajE,GAAIyE,EAAKE,QAAUF,EAAKG,UAMrDhC,EAAOyB,QAAQ,SAAAQ,GAAiB,IAAf7E,EAAe6E,EAAf7E,GAAI8E,EAAWD,EAAXC,MACXC,EAAYC,KACGC,MAhCH,SAACC,EAAoBC,GAC3C,IAAMC,EAAW,IAAMF,EACjBG,EAAc/G,OAAOgH,KAAK5C,GAAQ6C,OAAS,EAQjD,OANIjH,OACKgH,KAAKH,GACLK,OAAO,SAACC,EAAMC,GACX,IAAMC,EAAcR,EAASO,GAAO,EACpC,OAASN,EAAWC,EAAeM,EAAeF,GACnD,GAwBiBG,CAAkBd,EAAMS,OAAQtB,EAAajE,KAElEoE,EAAKyB,SACHzB,EAAKyB,OAAe7F,GAAM+E,MArB/BZ,EAAIX,EAAK+B,OAAS,EAAGpB,GAAK,EAAIA,IAAKD,EAAnCC,GA2BT,OADArB,EAASxE,OAAAwH,EAAA,EAAAxH,CAAIkF,IACNH,QAAQC,SAAQ,IAO1B,OAJA5E,oBAAU,WACN6E,KACD,IAEI,CAACwC,aAtIa,SAACC,GAElB,IAAMC,EAAWxC,KAAKyC,UAAL,GAAAhH,OAAAZ,OAAAwH,EAAA,EAAAxH,CAAmBuE,GAAnBvE,OAAAwH,EAAA,EAAAxH,CAA6B0H,KAI9C,OAFArC,aAAawC,QAAQ,QAASF,GAEvB1C,IAAW6C,KAAK,WAEnB,OADAjD,IACOE,QAAQC,SAAQ,MA8HTT,QAAOwD,UA5JX,SAACL,GAmBf,OAjBIpD,EACK0D,IAAI,SAACC,GAAD,MAAY,CACbvG,GAAIuG,EAAMvG,GACVwG,QAASD,EAAME,KACfC,SAAU,OAEbJ,IAAI,SAACC,GACF,IAAMI,EAAeX,EAChBR,OAAO,SAACC,EAAD1G,GAA0B,IAAjBiB,EAAiBjB,EAAjBiB,GAAI6F,EAAa9G,EAAb8G,OAKjB,OAJAJ,EAAKzF,GAAM,EACR6F,GAAUA,EAAOU,EAAMvG,MACtByF,EAAKzF,GAAM6F,EAAOU,EAAMvG,KAErByF,GACR,IACP,OAAOnH,OAAAsI,EAAA,EAAAtI,CAAA,GAAKqI,EAAiBJ,MA2ILM,KA1H3B,WACT,IAAIC,EAAS,GACPC,EAAYlE,EAAMmE,UAAU,SAAAC,GAAA,IAAEjH,EAAFiH,EAAEjH,GAAF,OAAUiD,EAAMjD,KAAOA,IAEtDiD,EAAMjD,IAAM+G,GAAa,EACxBD,EAAOC,GAAa9D,GAEpBA,EAAMjD,GAAN,GAAAd,QAAc,IAAIgI,MAAOC,WACzBL,EAAM,GAAA5H,OAAAZ,OAAAwH,EAAA,EAAAxH,CAAOuE,GAAS,CAACI,KAG3B,IAAMgD,EAAWxC,KAAKyC,UAAUY,GAIhC,OAFAnD,aAAawC,QAAQ,QAASF,GAEvB1C,IAAW6C,KAAK,WAEnB,OADAjD,IACOE,QAAQC,SAAQ,MAyGeH,QAAOiE,OAtFtC,SAACC,GACZ,IAAMN,EAAYlE,EAAMmE,UAAU,SAAAM,GAAA,IAAEtH,EAAFsH,EAAEtH,GAAF,OAAUqH,IAAWrH,IAIvD,OAHA6C,EAAM0E,OAAOR,EAAW,GACxBpD,aAAawC,QAAQ,QAAS1C,KAAKyC,UAAUrD,IAC7CC,EAASxE,OAAAwH,EAAA,EAAAxH,CAAIuE,IACNQ,QAAQC,SAAQ,IAiFkCkE,YA9EzC,SAACH,EAAgBrB,GAGjC,IAFA,IAAM/B,EAA6B,GADmBwD,EAAA,SAG9CtD,GACJ,IAAMC,EAAO4B,EAAO7B,GAapB,GAXAvB,EAAOyB,QAAQ,SAAAqD,GAAU,IAAR1H,EAAQ0H,EAAR1H,GACbiE,EAAajE,GAAMiE,EAAajE,IAAO,GACpCoE,EAAKG,OACHH,EACIG,MACAC,OAAO,SAACC,GAAD,OAAUA,EAAKC,UAAY1E,IAAIqE,QAAQ,SAAAI,GAC3CR,EAAajE,GAAIyE,EAAKE,QAAUF,EAAKG,UAKlDyC,IAAWjD,EAAKpE,GACf,eAfAmE,EAAI6B,EAAOT,OAAS,EAAGpB,GAAK,GAAS,UAAAsD,EAArCtD,GAAgCA,KAmBxC,OAAOF,GAwD+DhB,QAAO0E,OAhGlE,SAACvD,GAOZ,OANAlB,EAAS,SAAA0E,GACL,IAAMC,GAAW,IAAIX,MAAOC,UAG5B,OAFAS,EAAS5D,KAAO4D,EAAS5D,MAAS6D,EAClCD,EAAS/B,OAAS+B,EAAS/B,QAAU,GAC9BvH,OAAAsI,EAAA,EAAAtI,CAAA,GAAIsJ,EAAaxD,KAErBf,QAAQC,SAAQ,MA4FzBwE,EAAOjJ,wBAAc,ICtLrBkJ,EAAW,WAAM,IAAA5J,EACSC,mBAAS,IADlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZyE,EADYvE,EAAA,GACJ2J,EADI3J,EAAA,GAQnB,OANAK,oBAAU,WACPuJ,MAAM,qBACF7B,KAAK,SAAA8B,GAAE,OAAIA,EAAGC,SACd/B,KAAK,SAAA5C,GAAI,OAAIwE,EAAU1J,OAAAwH,EAAA,EAAAxH,CAAIkF,OAC/B,IAEI,CAAEZ,WAGPwF,EAAQvJ,wBAAc,ICPtB+B,EAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,UAAW,CACPC,MAAM,eAKRoH,EAAiH,SAAjHA,IAAuH,IAClHzF,EAAU0F,qBAAWF,GAArBxF,OAEP,OACGtD,EAAAC,EAAAC,cAACsI,EAAKS,SAAN,CAAehI,MAAOoC,EAAQC,IACzBtD,EAAAC,EAAAC,cAAC6I,EAAahH,KAAd,MACA/B,EAAAC,EAAAC,cAAC6I,EAAa/G,KAAd,QAmJZ+G,EAAahH,KA9IA,WACT,IAAME,EAAUX,IADD4H,EAEeF,qBAAWR,GAAlC/B,EAFQyC,EAERzC,aAAclD,EAFN2F,EAEM3F,MAkBrB,OACIvD,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQC,SAAS,QAAQR,MAAM,WAC3B3B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACIpC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,sBAGJxC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAY9B,MAAO,CAAE+B,SAAU,EAAGhB,MAAM,UAAWiB,YAAY,OAAQC,QAAQ,aAA/E,oBAIA7C,EAAAC,EAAAC,cAAA,SACIiJ,OAAO,SACPvI,MAAO,CAAEC,QAAS,QAClBH,GAAG,qBACH0I,UAAQ,EACRC,KAAK,OACLC,SAjCG,SAAA7J,GAA4C,IAA1C8J,EAA0C9J,EAA1C8J,OACXC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAA/B,GAAwB,IAAb4B,EAAa5B,EAAb4B,OACP,IAAtBA,EAAOI,aAGPJ,EAAOK,MACTC,MAAM,4BAGEpD,EAAatC,KAAKC,MAAMmF,EAAOO,SAC1BhD,KAAK,SAAAiD,GAAG,OAAIC,QAAQC,IAAI,8BAEjCT,EAAOU,WAAYX,EAAeY,MAAM,OAuBhCnK,EAAAC,EAAAC,cAAA,SAAOkK,QAAQ,sBACXpK,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACInB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACLT,UAAU,QAEVvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,kBAIR1B,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACQnB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACLqH,SAAQ,GAAAzK,QAAK,IAAIgI,MAAOC,UAAhB,eACRyC,KAAI,gCAAA1K,OAAkCqD,mBAAmBkB,KAAKyC,UAAUrD,KACxEhB,UAAU,KAEVvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,SAGR1B,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACInB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACL3B,GAAE,gBAAAzB,OAAkBqD,mBAAmB,mBACvCV,UAAWF,KAEXrC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,aA0EpBqH,EAAa/G,KAnEA,WAAM,IAAAnD,EACyBC,mBAAS,IADlCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACR0L,EADQxL,EAAA,GACMyL,EADNzL,EAAA,GAGT0L,EAAa,SAAC/F,GAAgB,IAAAgG,EACL,IAAI9C,KAAKlD,IAAQ,IAAIkD,MAAOC,WAAW8C,cAAcC,UAAU,EAAE,IAAIC,MAAM,KADtEC,EAAA9L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GACzBK,EADyBD,EAAA,GACnBE,EADmBF,EAAA,GACZG,EADYH,EAAA,GAEhC,SAAAlL,OAAUqL,EAAV,KAAArL,OAAiBoL,EAAjB,KAAApL,OAA0BmL,IAKxBG,EAAc,SAACC,GACjBX,EAAgBW,EAAKC,UAGzB,OACIpL,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWC,SAAS,MAChBnD,EAAAC,EAAAC,cAAA,WAASU,MAAO,CAACyK,MAAM,OAAQC,OAAO,MAClCtL,EAAAC,EAAAC,cAACsI,EAAK+C,SAAN,KACK,SAAAvD,GAAA,IAAEzE,EAAFyE,EAAEzE,MAAOwD,EAATiB,EAASjB,UAAT,OACG/G,EAAAC,EAAAC,cAACsL,EAAA,EAAD,KACIxL,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CACIC,OAAQ,CACJC,IAAK,IACLC,MAAO,GACPC,KAAM,EACNC,QAAS,IAEbC,YAAa,IACb5H,KAAM6C,EAAUxD,IAEhBvD,EAAAC,EAAAC,cAACsL,EAAA,EAAD,MACAxL,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CAAgBJ,QAAQ,YACxBpL,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CAAiBO,MAAO,GAAIC,OAAQ,CAAC,EAAG,OAEvCzI,EACIyD,IAAI,SAAAoB,GAAgB,IAAd1D,EAAc0D,EAAd1D,KAAMhE,EAAQ0H,EAAR1H,GACHiB,EA7BpB,IAAI+D,KAAKuG,MAAoB,SAAdvG,KAAKwG,UAAmBC,SAAS,IA8BlC,OAAQnM,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CAAOpF,IAAK1F,EAAIyG,KAAI,QAAAvH,OAAU6K,EAAW/F,IAAS0G,QAAS1K,EAAI0L,OAAQzK,EAAO0K,KAAM1K,EAAO2K,YAAa,OAIxHtM,EAAAC,EAAAC,cAACsL,EAAA,EAAD,CAAQe,QAASrB,QAKjClL,EAAAC,EAAAC,cAACsM,EAAA,EAAD,CAAKZ,KAAK,IAAID,MAAM,IAAIxJ,SAAS,WAAWrB,eAAe,SAAS2L,WAAW,SAAS5L,QAAQ,OAAOD,MAAO,CAACiL,OAAO,KAClH7L,EAAAC,EAAAC,cAACwM,EAAA,EAAD,CACI7J,QAAQ,YACRxB,GAAG,YACHkB,UAAWF,IACXrB,KAAK,SAELhB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,YANJ,kBAaT+H,GAAiBvK,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAUtL,GAAE,aAAAzB,OAAe2K,OAQ5CxB,uECtJTzH,GAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACXmL,YAAa,CACXC,UAAW,IAEbnL,UAAW,CACPC,MAAM,WAEVmL,UAAW,CACPnL,MAAO,UACPoL,gBAAiB,cACjBC,OAAQ,EACRC,SAAU,UACVC,WAAY,eAKdC,GAA4F,SAA5FA,EAA4F1N,GAAc,IAAZsI,EAAYtI,EAAZsI,OACzFzE,EAAU0F,qBAAWF,GAArBxF,OAEP,OACGtD,EAAAC,EAAAC,cAACsI,EAAKS,SAAN,CAAehI,MAAOoC,EAAQC,IACzBtD,EAAAC,EAAAC,cAACiN,EAAQpL,KAAT,CAAcgG,OAAQA,IACtB/H,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACkN,GAAD,CAAUrF,OAAQA,OAkG5BsF,GAAgE,SAAhEA,EAAgErI,GAAcA,EAAZ+C,OAAY,IAAAuF,EACVtE,qBAAWR,GAA1EjF,EADyE+J,EACzE/J,MAAqBgK,EADoDD,EAClE/J,MAAO0C,OAAmBoC,EADwCiF,EACxCjF,OAAQH,EADgCoF,EAChCpF,YAAavE,EADmB2J,EACnB3J,MACtDL,EAAU0F,qBAAWF,GAArBxF,OAFyEkK,EAGtCC,IAAM3O,SAAN,KAHsC4O,EAAA1O,OAAAC,EAAA,EAAAD,CAAAwO,EAAA,GAGzEG,EAHyED,EAAA,GAG1DE,EAH0DF,EAAA,GAI1EG,EAAQ,CAAC,OAAO,qBAAqB,UAAU,MAAM,UAErDC,EAAc,SAACC,EAAkB3I,EAAgBC,GAAkB,IAAA2I,EAChDrK,EAAdsB,aAD8D,IAAA+I,EACtD,GADsDA,EAErE,GAAGD,EAAU,CACT,IAAME,EAAYhJ,EAAMyC,UAAU,SAAAvC,GAAI,OAAIA,EAAKE,SAAWA,IACvD4I,GAAa,GAAKhJ,EAAMgJ,GAAW3I,QAAUyI,GAC5C9I,EAAMgJ,GAAW3I,MAAQyI,EACzB1F,EAAO,CAACpD,MAAMjG,OAAAwH,EAAA,EAAAxH,CAAKiG,MAEnBoD,EAAO,CAACpD,MAAK,GAAArF,OAAAZ,OAAAwH,EAAA,EAAAxH,CAAMiG,GAAS,CAAC,CACzBI,SACAD,UACAE,MAAMyI,SAMhBG,EAAUlP,OAAOgH,KAAK5C,GAAS8B,OAAO,SAACkB,GAAD,MAAoC,kBAAhBhD,EAAOgD,KAiCvE,OACIpG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACIR,EAAAC,EAAAC,cAACiO,EAAA,EAAD,CAAOC,QAAM,EAACxN,MAAO,CAAC+B,SAAS,IAC3B3C,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CACIpN,MAAO0M,EACPrE,SAAU,SAACgF,EAAOC,GACXA,IAAaZ,GACZC,EAAiBW,IAGzB5M,MAAM,UACNkB,QAAQ,YACR2L,UAAQ,GAGJlL,EAAO0D,IAAI,SAACC,EAAOwH,GAAR,OACPzO,EAAAC,EAAAC,cAACwO,EAAA,EAAD,CACItI,IAAKa,EAAMvG,GACXiO,MAAO1H,EAAME,KACblG,MAAOgG,EAAMvG,GACbkO,KACI5O,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMb,MAAM,SAASsL,SAAS,SAASY,EAAMY,UAMrEzO,EAAAC,EAAAC,cAAC2O,EAAA,EAAD,KA1DU,SAACzJ,GACf,IAAM6B,EAAQ3D,EAAOwL,KAAK,SAAC7H,GAAD,OAAWA,EAAMvG,KAAO0E,IAClD,GAAoB,qBAAV6B,IAA0BtD,EAChC,MAAO,CACH6B,MAAM,GACN9E,GAAG,GACHyG,KAAK,GACL4H,YAAY,IAIpB,IAAMlJ,EAAWqC,EAAYvE,EAAMjD,GAAI6C,GAYvC,OAVA0D,EAAMzB,MAAMT,QAAQ,SAAAiK,GAChB,IAAM7J,EAAOxB,EAAMsB,MAAQtB,EAAMsB,MAAM6J,KAAK,SAAAhK,GAAI,OAAIA,EAAKM,UAAYA,GAAWN,EAAKO,SAAW2J,EAAKtO,KAAM,KACvG4E,EAAQlC,EAAO6L,aAChB9J,EACCG,EAAQH,EAAKG,MACRO,EAAST,IAAYS,EAAST,GAAS4J,EAAKtO,MACjD4E,EAAQO,EAAST,GAAS4J,EAAKtO,KAEnCsO,EAAK1J,MAAQA,IAEV2B,EAqCKiI,CAAUvB,GAAenI,MAAMwB,IAAI,SAACgI,EAAMP,GAAP,OAC/BzO,EAAAC,EAAAC,cAACmN,EAAS8B,KAAV,CACI7F,SAAUwE,EACV1I,QAASuI,EACTtI,OAAQ2J,EAAKtO,GACb0O,UAvCNhK,EAuCyBuI,EAvCTtI,EAuCwB2J,EAAKtO,IAtC7C4C,EAAOwL,KAAK,SAAC7H,GAAD,OAAWA,EAAMvG,KAAO0E,KAAY,CAAEI,MAAM,KACzDA,MAAMsJ,KAAK,SAAAE,GAAI,OAAIA,EAAKtO,KAAO2E,KAAW,IAqCQ0J,YAC3CzJ,MAAO0J,EAAK1J,MACZc,IAAG,GAAAxG,OAAKoP,EAAKtO,GAAV,KAAAd,OAAgB2N,EAAhB,SACHW,OAAQA,IA1Cf,IAAC9I,EAAgBC,OA8FtCgI,GAAS8B,KA3CuB,SAAA5J,GAA0D,IAAxD6J,EAAwD7J,EAAxD6J,SAAUlB,EAA8C3I,EAA9C2I,OAAQ5I,EAAsCC,EAAtCD,MAAOgE,EAA+B/D,EAA/B+D,SAAUlE,EAAqBG,EAArBH,QAASC,EAAYE,EAAZF,OAAY5B,EACpD3E,mBAASwG,GAD2C5B,EAAA1E,OAAAC,EAAA,EAAAD,CAAAyE,EAAA,GAC/E4L,EAD+E3L,EAAA,GAChE4L,EADgE5L,EAAA,GAGhF6L,EAAoB,SAAAC,GAAmB,IAAjBjG,EAAiBiG,EAAjBjG,OAClBtI,EAAQwO,OAAOlG,EAAOtI,OAASoO,GACrCC,EAASrO,GACTqI,EAASrI,EAAOmE,EAASC,IAG7B,OACIrF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACIR,EAAAC,EAAAC,cAACwP,EAAA,EAAD,CAAUjD,WAAW,cACjBzM,EAAAC,EAAAC,cAACsM,EAAA,EAAD,CAAK3L,QAAQ,OAAO8O,cAAc,MAAMhN,SAAU,EAAGiN,SAAS,QAC1D5P,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAY9B,MAAO,CAAEyK,MAAO,SACvB+D,GAEJlB,EAAOlH,IACJ,SAAC1B,EAAOmJ,GAAR,OACIzO,EAAAC,EAAAC,cAAC2P,EAAA,EAAD,CACIzJ,IAAG,IAAAxG,OAAM6O,GACTqB,MAAOxK,EACPsJ,KACI5O,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMb,MAAM,SAASsL,SAAS,SAA9B,eAEJ8C,YACI/P,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAM5B,MAAO,CAACe,MAAM,WAAYsL,SAAS,SAAzC,QAEJ+C,QAASX,GAAiBZ,EAC1BxN,MAAOwN,EACPnF,SAAUiG,MAItBvP,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAYG,QAAQ,WAAWlB,MAAM,gBAAgBf,MAAO,CAAEyK,MAAO,SAChEjI,EAAOiM,MAIpBrP,EAAAC,EAAAC,cAAC+P,EAAA,EAAD,CAASpN,QAAQ,YAAYN,UAAU,SAMnD4K,GAAQpL,KA7OwC,SAAA4F,GAAc,IAAZI,EAAYJ,EAAZI,OAAYlJ,EAC1BC,oBAAS,GADiBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnDqR,EADmDnR,EAAA,GACzCoR,EADyCpR,EAAA,GAEpDkD,EAAUX,KAF0C4H,EAGNF,qBAAWR,GAAxDjF,EAHmD2F,EAGnD3F,MAAOuE,EAH4CoB,EAG5CpB,OAAQO,EAHoCa,EAGpCb,OAAQxE,EAH4BqF,EAG5BrF,MAAO0D,EAHqB2B,EAGrB3B,KAAM5D,EAHeuF,EAGfvF,MAE3CvE,oBAAU,WACN,GAAqB,qBAAX2I,GAA4BpE,EAAMjD,GACxC2H,EAAO,CACH3H,GAAE,GAAAd,QAAI,IAAIgI,MAAOC,WACjB5C,MAAO,UAET,GAAK8C,GAAUpE,EAAMjD,KAAOqH,EAAO,CACrC,IAAMjD,EAAOvB,EAAMuL,KAAK,SAAA9G,GAAA,IAAEtH,EAAFsH,EAAEtH,GAAF,OAAUqH,IAAWrH,KAAO,GACpD2H,EAAOvD,GAEX,OAAO,WACHjB,MAEL,CAACN,IAwBJ,OACIvD,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQC,SAAS,QAAQR,MAAM,WAC3B3B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQzB,MAAO,CAAC0B,YAAY,OAAQC,UAAWF,IAAMhB,GAAG,KACpDrB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,uBAGJ1B,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,wBAGDmB,GACC3D,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAY9B,MAAO,CAAE+B,SAAU,EAAGhB,MAAM,UAAWiB,YAAY,OAAQC,QAAQ,aAA/E,UAEI7C,EAAAC,EAAAC,cAAA,SAAOkB,UAAWa,EAAQ6K,UAAWzD,KAAK,OAAOpI,MApChD,SAACmP,GAAiB,IAAA1F,EACR,IAAI9C,KAAKwI,GAAOzF,cAAcC,UAAU,EAAE,IAAIC,MAAM,KAD5CC,EAAA9L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAC5BK,EAD4BD,EAAA,GACtBE,EADsBF,EAAA,GACfG,EADeH,EAAA,GAEnC,SAAAlL,OAAUmL,EAAV,KAAAnL,OAAkBoL,EAAlB,KAAApL,OAA2BqL,GAkC6CoF,CAAa1M,EAAMe,OAAQ,IAAIkD,MAAOC,WAAYyB,SApB3G,SAAAlB,GAA2D,IAAAkI,EAAAlI,EAAzDmB,OAAQtI,MACQ4J,MAAM,KADmC0F,EAAAvR,OAAAC,EAAA,EAAAD,CAAAsR,EAAA,GACnEvF,EADmEwF,EAAA,GAC7DvF,EAD6DuF,EAAA,GACtDtF,EADsDsF,EAAA,GAEtEC,EAAY,IAAI5I,KAAK6H,OAAO1E,GAAO0E,OAAQzE,GAAU,EAAGyE,OAAOxE,IAAMpD,UACzEQ,EAAO,CAAC3D,KAAK8L,UAqBFzI,GACC/H,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACInB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACLuJ,QAxCE,WAClBzE,EAAOC,GACPlE,IACAsM,GAAY,KAuCInQ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMpB,UAAWa,EAAQP,WAAzB,oBAINqG,GACE/H,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACInB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACLuJ,QA7CA,WAChBhF,IACKT,KAAK,kBAAMqJ,GAAY,OA6CZnQ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACIpB,UAAWa,EAAQP,WADvB,SAMPwO,GAAYlQ,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAUtL,GAAG,SA2J3B8L,UC1PAsD,GAlCO,WACpB,OACEzQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACER,EAAAC,EAAAC,cAACwQ,EAAA,EAAD,MACA1Q,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAC4I,EAAMG,SAAP,CAAgBhI,MAAOwH,KACrBzI,EAAAC,EAAAC,cAACZ,EAAK2J,SAAN,CAAehI,MAAOrC,KACpBoB,EAAAC,EAAAC,cAACZ,EAAKiM,SAAN,KACG,SAAA9L,GAAA,IAAEP,EAAFO,EAAEP,OAAF,OACCc,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACGtB,EACCc,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACyM,EAAA,EAAD,KACE3M,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM7Q,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAUtL,GAAG,sBACjDrB,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,gBAAgBC,OAAK,EAACC,OAAQ,kBAAM7Q,EAAAC,EAAAC,cAAC4Q,EAAD,CAAa5R,OAAQA,OACrEc,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,iBAAiBC,OAAK,EAACC,OAAQ,kBAAM7Q,EAAAC,EAAAC,cAAC6Q,EAAD,CAAc7R,OAAQA,OACvEc,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,oBAAoBE,OAAQ,SAAAlJ,GAAA,IAASqJ,EAATrJ,EAAEsJ,MAAOD,OAAT,OAAsBhR,EAAAC,EAAAC,cAACgR,EAAD,CAAQxR,IAAG,GAAAE,OAAKuR,mBAAmBH,EAAOtR,WACxGM,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,YAAYpO,UAAW4K,KACnCnN,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOgE,KAAK,iBAAiBE,OAAQ,SAAA7I,GAAA,IAASgJ,EAAThJ,EAAEiJ,MAAOD,OAAT,OAAsBhR,EAAAC,EAAAC,cAACkR,GAAD,CAASrJ,OAAQiJ,EAAOtQ,UAIzFV,EAAAC,EAAAC,cAACmR,EAAA,EAAD,cCtBEC,QACW,cAA7BzR,OAAOC,SAASyR,UAEe,UAA7B1R,OAAOC,SAASyR,UAEhB1R,OAAOC,SAASyR,SAASN,MACvB,2DCZNO,IAASX,OAAO7Q,EAAAC,EAAAC,cAACuR,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhL,KAAK,SAAAiL,GACjCA,EAAaC","file":"static/js/main.e2e750ce.chunk.js","sourcesContent":["import { useState, createContext, useEffect } from 'react';\n\ninterface ISignStore {\n    idUser:string;\n}\n\nconst useSign = () => {\n    const [idUser, setIdUser] = useState('');\n    useEffect(() => {\n       setTimeout(() => setIdUser('uid'), 800);\n    },[]);\n\n    return { idUser };\n}\n\nconst Sign = createContext({} as ISignStore);\n\nexport {Sign, useSign};\n","import React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { Link} from 'react-router-dom';\nimport QRCode from 'qrcode.react';\n \nconst QRCodeDialog = ({url}:{url:string}) => {\n    const urldefault = `https://${window.location.host}${url}`;\n    return (\n            <Dialog fullScreen typeof=\"\" aria-labelledby=\"form-dialog-title\" open>\n                <>\n                    <DialogTitle id=\"simple-dialog-title\">\n                        {urldefault}\n                    </DialogTitle>\n                    <DialogContent style={{display: \"flex\", justifyContent: \"center\"}}>\n                        <QRCode size={300} value={urldefault} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Link className=\"MuiButtonBase-root MuiButton-root MuiButton-text\" to={url}>\n                            Close\n                        </Link>\n                    </DialogActions>\n                </>\n            </Dialog>        \n    );\n}\n\nexport default QRCodeDialog;","import React, { FunctionComponent, useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Link } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, Typography, IconButton, Icon } from '@material-ui/core';\nimport LinkUI from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    iconStyle: {\n        color:'#efefef'\n    }\n  }),\n);\n\n\nconst UserProfile: FunctionComponent<{idUser:string}> & { Head: FunctionComponent<{}>, Body: FunctionComponent<{}>} = () => {\n    const [logged, setLogged] = useState(false);\n\n    if (!logged) {\n        setLogged(true);\n    }\n\n    return (\n        <>\n            <UserProfile.Head/>\n            <UserProfile.Body/>\n        </>\n    );\n}\n\nconst Head = () => {\n    const classes = useStyles();\n    return(\n        <AppBar position=\"fixed\" color=\"inherit\">\n            <Toolbar>\n                <LinkUI style={{marginRight:\"4px\"}} component={Link} to=\"/\">\n                    <Icon className={classes.iconStyle}>keyboard_backspace</Icon>\n                </LinkUI>\n                <Avatar>\n                    <Icon>face</Icon>\n                </Avatar>\n\n                <Typography style={{ flexGrow: 1, color:\"#efefef\", paddingLeft:\"4px\"}} variant=\"subtitle2\">\n                    user\n                </Typography>\n\n                <IconButton\n                    color=\"default\"\n                    aria-label=\"Open drawer\"\n                    edge=\"end\"\n                    to={`/qr-code/url/${encodeURIComponent('/party/id')}`}\n                    component={Link}\n                >\n                    <Icon className={classes.iconStyle}>share</Icon>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nconst Body = () => {\n    return(\n        <main>\n            <Container maxWidth=\"lg\">\n                <section>\n\n                </section>\n            </Container>\n        </main>\n    )\n}\n\nUserProfile.Head = Head;\nUserProfile.Body = Body;\n\nexport default UserProfile;","export enum ELevel{\n    BREAKTHROUGH,\n    WAYSTAGE,\n    THRESHOLD,\n    VANTAGE,\n    EFFECTIVE,\n    MASTERY\n}\n\nexport interface IToolsLevel{\n    idTool:string;\n    level:ELevel;\n    idSkill:string;\n}\n\nexport interface IExame{\n    id:string;\n    date:number;\n    tests:IToolsLevel[];\n    scores:{\n        [idSkill:string]:number;\n    };\n}","import { useState, createContext, useEffect } from 'react';\nimport { IExame, ELevel } from '../interfaces/i-exame';\nimport { ISkill } from '../interfaces/i-skill';\n\ninterface ISummarize {\n    [key: string]: any;\n}\n\ninterface IVirtualExam {\n    [idSkill:string]: {\n        [idTool:string] : ELevel\n    };\n}\n\ninterface IExamStore {\n    exams: IExame[];\n    stage: IExame;\n    commit: (exam: IExame) => Promise<boolean>;\n    includeExams: (exams: IExame[]) => Promise<boolean>;\n    reset: () => Promise<boolean>;\n    summarize: (exams: IExame[]) => ISummarize[];\n    push: () => Promise<boolean>;\n    remove: (idExam: string) => Promise<boolean>;\n    getSnapshot: (idExam: string, exams: IExame[]) => IVirtualExam;\n}\n\nconst useExam = (skills: ISkill[]) => {\n    const [exams, setExams] = useState([] as IExame[]);\n    const [stage, setStage] = useState({} as IExame);\n\n    const summarize = (pexams: IExame[]) => {\n        const data =\n            skills\n                .map((skill) => ({\n                    id: skill.id,\n                    subject: skill.name,\n                    fullMark: 100\n                }))\n                .map((skill) => {\n                    const examsBySkill = pexams\n                        .reduce((prev, { id, scores }) => {\n                            prev[id] = 0;\n                            if(scores && scores[skill.id]){\n                                prev[id] = scores[skill.id];\n                            }\n                            return prev;\n                        }, {} as { [key: string]: number });\n                    return { ...examsBySkill, ...skill };\n                });\n        return data as ISummarize[];\n    }\n\n    const includeExams = (pexams: IExame[]) => {\n        \n        const nexamStr = JSON.stringify([...exams, ...pexams]);\n\n        localStorage.setItem('exams', nexamStr);\n\n        return readData().then(() => {\n            reset();\n            return Promise.resolve(true);\n        });\n    };\n\n    const push = () => {\n        let nexams = [];\n        const examIndex = exams.findIndex(({id}) => stage.id === id);\n\n        if(stage.id && examIndex > -1){\n            nexams[examIndex] = stage;\n        }else{\n            stage.id = `${new Date().getTime()}`;\n            nexams = [...exams,...[stage]];\n        }\n\n        const nexamStr = JSON.stringify(nexams);\n\n        localStorage.setItem('exams', nexamStr);\n\n        return readData().then(() => {\n            reset();\n            return Promise.resolve(true);\n        });       \n    }\n\n    const reset = () => {\n        setStage(Object.create({}));\n        return Promise.resolve(true);\n    }\n\n    const commit = (exam: IExame) => {\n        setStage(oldStage => {\n            const dateTime = new Date().getTime();\n            oldStage.date = oldStage.date  || dateTime;\n            oldStage.scores = oldStage.scores || {};\n            return {...oldStage, ...exam};\n        });\n        return Promise.resolve(true);\n    }\n\n    const remove = (idExam: string) => {\n        const examIndex = exams.findIndex(({id}) => idExam === id);\n        exams.splice(examIndex, 1);\n        localStorage.setItem('exams', JSON.stringify(exams));\n        setExams([...exams]);\n        return Promise.resolve(true);\n    }\n\n    const getSnapshot = (idExam: string, pexams: IExame[]) => {\n        const virtualTests: IVirtualExam = {};\n\n        for(let x = pexams.length - 1; x > -1 ; x-- ){\n            const exam = pexams[x];\n\n            skills.forEach(({id}) => {\n                virtualTests[id] = virtualTests[id] || {};\n                if(exam.tests){\n                     exam\n                        .tests\n                        .filter((test) => test.idSkill === id).forEach(test => {\n                            virtualTests[id][test.idTool] = test.level;\n                        });               \n                }\n            });\n\n            if(idExam === exam.id){\n                break;\n            }\n        }\n\n        return virtualTests;\n    }\n\n    const readData = () => {\n        const data:IExame[] = JSON.parse(localStorage.getItem('exams') || '[]');\n        data.sort((currExam, nextExam) => nextExam.date - currExam.date);\n        \n        const getScoreByIdSkill = (countTools: number, snapshot:{[key:string]:number}) => {\n            const baseCalc = 100 / countTools;\n            const levelLength = Object.keys(ELevel).length / 2;\n            const score = \n                Object\n                    .keys(snapshot)\n                    .reduce((prev, key) => {\n                        const levelWeight = snapshot[key] + 1;\n                        return ((baseCalc / levelLength) * levelWeight) + prev;\n                    }, 0);\n            return score;\n        };\n\n        const virtualTests: IVirtualExam = {};\n\n        for(let x = data.length - 1; x > -1 ; x-- ){\n            const exam = data[x];\n\n            skills.forEach(({id}) => {\n                virtualTests[id] = virtualTests[id] || {};\n                if(exam.tests){\n                    exam\n                        .tests\n                        .filter((test) => test.idSkill === id).forEach(test => {\n                            virtualTests[id][test.idTool] = test.level;\n                        });\n                }\n\n            });\n\n            skills.forEach(({id, tools}) => {\n                const exams1Res = Math\n                                    .trunc(\n                                        getScoreByIdSkill(tools.length, virtualTests[id])\n                                    );\n                if(exam.scores){\n                    (exam.scores as any)[id] = exams1Res;\n                }\n            });\n        };\n\n       setExams([...data]);\n       return Promise.resolve(true);\n    }\n\n    useEffect(() => {\n        readData();\n    }, []);\n\n    return {includeExams, exams, summarize, push, reset, remove, getSnapshot, stage, commit};\n}\n\nconst Exam = createContext({} as IExamStore);\n\nexport { Exam, useExam };\n","import { useState, createContext, useEffect } from 'react';\nimport { ISkill } from '../interfaces/i-skill';\n\ninterface ISkillStore {\n    skills: ISkill[];\n}\n\nconst useSkill = () => {\n    const [skills, setSkills] = useState([] as ISkill[]);\n    useEffect(() => {\n       fetch('/data/skills.json')\n          .then(rs => rs.json())\n          .then(data => setSkills([...data]));\n    }, []);\n\n    return { skills };\n}\n\nconst Skill = createContext({} as ISkillStore);\n\nexport { Skill, useSkill };\n","import React, { FunctionComponent, useContext, useState, ChangeEvent } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Link, Redirect } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, Typography, IconButton, Icon, Button, Box } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer } from 'recharts';\nimport { Exam, useExam } from '../stores/ExamStore';\nimport { Skill } from '../stores/SkillStore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    iconStyle: {\n        color:'#efefef'\n    }\n  }),\n);\n\nconst ExamAnalysis: FunctionComponent<{idUser:string}> & { Head: FunctionComponent<{}>, Body: FunctionComponent<{}>} = () => {\n    const {skills} = useContext(Skill);\n\n    return (\n       <Exam.Provider value={useExam(skills)}>\n            <ExamAnalysis.Head/>\n            <ExamAnalysis.Body/>\n        </Exam.Provider>\n    );\n}\n\nconst Head = () => {\n    const classes = useStyles();\n    const {includeExams, exams} = useContext(Exam);\n\n    const inportFile = ({target}:ChangeEvent<HTMLInputElement>) => {\n        const reader = new FileReader();\n        reader.onload = function ({target}:any) {\n\t\t\tif(target.readyState !== 2){\n\t\t\t\treturn;\t\n\t\t\t}\n\t\t\tif(target.error) {\n\t\t\t\talert(\"Error while reading file\");\n\t\t\t\treturn;\n\t\t\t}\n            includeExams(JSON.parse(target.result))\n                .then(res => console.log('imported with success!'));\n        };\n        reader.readAsText((target as any).files[0]);\n    }\n\n    return(\n        <AppBar position=\"fixed\" color=\"inherit\">\n            <Toolbar>\n                <Avatar>\n                    <Icon>insert_chart</Icon>\n                </Avatar>\n\n                <Typography style={{ flexGrow: 1, color:\"#efefef\", paddingLeft:\"4px\"}} variant=\"subtitle2\">\n                    My Exam Analysis\n                </Typography>\n\n                <input\n                    accept=\"json/*\"\n                    style={{ display: 'none' }}\n                    id=\"raised-button-file\"\n                    multiple\n                    type=\"file\"\n                    onChange={inportFile}\n                />\n\n                <label htmlFor=\"raised-button-file\">\n                    <IconButton\n                        color=\"default\"\n                        aria-label=\"Open drawer\"\n                        edge=\"end\"\n                        component=\"span\"\n                    >\n                        <Icon className={classes.iconStyle}>cloud_upload</Icon>\n                    </IconButton>\n                </label>\n\n                <IconButton\n                        color=\"default\"\n                        aria-label=\"Open drawer\"\n                        edge=\"end\"\n                        download={`${new Date().getTime()}-.exam.json`}\n                        href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(exams))}`}\n                        component=\"a\"\n                    >\n                        <Icon className={classes.iconStyle}>save</Icon>\n                </IconButton>\n\n                <IconButton\n                    color=\"default\"\n                    aria-label=\"Open drawer\"\n                    edge=\"end\"\n                    to={`/qr-code/url/${encodeURIComponent('/exam-analysis')}`}\n                    component={Link}\n                >\n                    <Icon className={classes.iconStyle}>share</Icon>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nconst Body = () => {\n    const [selectedExam, setSelectedExam] = useState('');\n\n    const formatDate = (date:number) => {\n        const [year, month, day] = new Date(date || new Date().getTime()).toISOString().substring(0,10).split('-');\n        return `${day}/${month}/${year}`;\n    }\n\n    const randomColor = () => '#'+Math.floor(Math.random()*16777215).toString(16);\n\n    const legendClick = (even:{dataKey:string}) => {\n        setSelectedExam(even.dataKey);\n    }\n\n    return(\n        <main>\n            <Container maxWidth=\"lg\">\n                <section style={{width:'100%', height:330}}>\n                    <Exam.Consumer>\n                        {({exams, summarize}) => (\n                            <ResponsiveContainer>\n                                <RadarChart \n                                    margin={{\n                                        top: 100,\n                                        right: 30,\n                                        left: 0,\n                                        bottom: -50,\n                                    }} \n                                    outerRadius={100} \n                                    data={summarize(exams)}\n                                >\n                                    <PolarGrid />\n                                    <PolarAngleAxis dataKey=\"subject\" />\n                                    <PolarRadiusAxis angle={55} domain={[0, 100]}/>\n                                    \n                                    {exams\n                                        .map(({date, id}) => {\n                                            const color = randomColor();\n                                            return (<Radar key={id} name={`exam ${formatDate(date)}`} dataKey={id} stroke={color} fill={color} fillOpacity={0.6}/>);\n                                        })\n                                    }\n\n                                    <Legend onClick={legendClick} />\n                                </RadarChart>\n                            </ResponsiveContainer>\n                        )}\n                    </Exam.Consumer>\n                    <Box left=\"0\" right=\"0\" position=\"absolute\" justifyContent=\"center\" alignItems=\"center\" display=\"flex\" style={{bottom:16}}>\n                        <Button\n                            variant=\"contained\" \n                            to=\"/exam/add\"\n                            component={Link}\n                            size=\"small\"\n                        >\n                            <Icon>add</Icon>\n                            Lang Exam\n                        </Button>\n                    </Box>\n                </section>\n            </Container>\n\n            {!!selectedExam && (<Redirect to={`exam/edit/${selectedExam}`} />)}\n        </main>\n    )\n}\n\nExamAnalysis.Head = Head;\nExamAnalysis.Body = Body;\n\nexport default ExamAnalysis;\n","import React, { FunctionComponent, useState, useContext, useEffect } from 'react';\nimport { IExame, ELevel, IToolsLevel } from '../interfaces/i-exame';\nimport { Checkbox, List, Divider, ListItem, Tabs, Tab, Paper } from '@material-ui/core';\nimport { ISkill, ITool } from '../interfaces/i-skill';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Link, Redirect } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, Typography, IconButton, Icon, Box } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Exam, useExam } from '../stores/ExamStore';\nimport { Skill } from '../stores/SkillStore';\nimport LinkUI from '@material-ui/core/Link';\n\ninterface State{\n    idExam?:string;\n}\n\ninterface StateExam{\n    idSkill:string;\n    idTool:string;\n    level:ELevel;\n}\n\ninterface StateTestComponent extends FunctionComponent<IToolsLevel & {toolName:string, levels:string[], onChange:(level: ELevel, idSkill:string, idTool:string ) => void }>{};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    selectEmpty: {\n      marginTop: 16,\n    },\n    iconStyle: {\n        color:'#efefef'\n    },\n    headInput: {\n        color: 'inherit',\n        backgroundColor: 'transparent',\n        border: 0,\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n    }\n  }),\n);\n\nconst ExamAdd: FunctionComponent<{idExam:string}> & { Head: FunctionComponent<{idExam:string}>} = ({idExam}) => {\n    const {skills} = useContext(Skill);\n\n    return (\n       <Exam.Provider value={useExam(skills)}>\n            <ExamAdd.Head idExam={idExam}/>\n            <main>\n                <ExamForm idExam={idExam}/>\n            </main>\n        </Exam.Provider>\n    );\n}\n\n\nconst Head:FunctionComponent<{idExam:string}> = ({idExam}) => {\n    const [redirect, setRedirect] = useState(false);\n    const classes = useStyles();\n    const {exams, remove, commit, reset, push, stage} = useContext(Exam);\n\n    useEffect(() => {\n        if(typeof idExam === 'undefined' && !!stage.id){        \n            commit({\n                id:`${new Date().getTime()}`,\n                tests: [] as IToolsLevel[],\n            } as IExame);\n        }else if(!!idExam && stage.id !== idExam){\n            const exam = exams.find(({id}) => idExam === id) || {} as IExame;\n            commit(exam);\n        }\n        return () => {\n            reset();\n        };\n    }, [exams]);\n \n    const dateFormated = (pdate:number) => {\n        const [year, month, day] = new Date(pdate).toISOString().substring(0,10).split('-');\n        return `${year}-${month}-${day}`;\n    };\n\n    const wrapperRemove = () => {\n        remove(idExam);\n        reset();\n        setRedirect(true);\n    };\n\n    const wrapperSave = () => {\n        push()\n            .then(() => setRedirect(true));\n    }\n\n    const changeDate = ({target:{value}}: React.ChangeEvent<HTMLInputElement>) => {\n        const [year, month, day] = value.split('-');\n        let dateValue = new Date(Number(year), Number( month ) - 1, Number(day)).getTime();\n        commit({date:dateValue} as IExame);\n    };\n\n    return(\n        <AppBar position=\"fixed\" color=\"inherit\">\n            <Toolbar>\n                <LinkUI style={{marginRight:\"4px\"}} component={Link} to=\"/\">\n                    <Icon className={classes.iconStyle}>keyboard_backspace</Icon>\n                </LinkUI>\n\n                <Avatar>\n                    <Icon>insert_chart</Icon>\n                </Avatar>\n\n                {!!stage && (\n                    <Typography style={{ flexGrow: 1, color:\"#efefef\", paddingLeft:\"4px\"}} variant=\"subtitle2\">\n                        Exam of\n                        <input className={classes.headInput} type=\"date\" value={dateFormated(stage.date || new Date().getTime())} onChange={changeDate}/>\n                    </Typography>\n                )}\n\n                {!!idExam && (\n                    <IconButton\n                        color=\"default\"\n                        aria-label=\"Open drawer\"\n                        edge=\"end\"\n                        onClick={wrapperRemove}\n                    >\n                        <Icon className={classes.iconStyle}>delete_forever</Icon>\n                    </IconButton>\n                )}\n\n                {!idExam && (\n                    <IconButton\n                        color=\"default\"\n                        aria-label=\"Open drawer\"\n                        edge=\"end\"\n                        onClick={wrapperSave}\n                    >\n                        <Icon \n                            className={classes.iconStyle} \n                        >done</Icon>\n                    </IconButton>\n                )}\n\n                {redirect && <Redirect to=\"/\" />}\n\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nconst ExamForm:FunctionComponent<State> & {Test:StateTestComponent} = ({idExam}) => {\n    const {exams, exams:{length:examCount}, commit, getSnapshot, stage} = useContext(Exam);\n    const {skills} = useContext(Skill);\n    const [selectedSkill, setSelectedSkill] = React.useState(`5`);\n    const icons = ['book','chrome_reader_mode','hearing','sms','create'];\n    \n    const setTestItem = (toolLevel:ELevel, idSkill:string, idTool:string) => {\n        const {tests = []} = stage;\n        if(toolLevel){\n            const testIndex = tests.findIndex(test => test.idTool === idTool);\n            if(testIndex > -1 && tests[testIndex].level !== toolLevel){\n                tests[testIndex].level = toolLevel;\n                commit({tests: [...tests]} as IExame);\n            }else{\n                commit({tests: [...tests,...[{\n                    idTool,\n                    idSkill,\n                    level:toolLevel,\n                }]]} as IExame);\n            }\n        }\n    }\n    \n    const levels = (Object.keys(ELevel)).filter((key:any) => typeof ELevel[key] === 'number');\n\n    const skillById = (idSkill:string) => {\n        const skill = skills.find((skill) => skill.id === idSkill);\n        if(typeof skill === 'undefined' || !stage){\n            return {\n                tools:[],\n                id:'',\n                name:'',\n                description:''\n            } as ISkill;\n        }\n\n        const snapshot = getSnapshot(stage.id, exams);\n        \n        skill.tools.forEach(tool => {\n            const test = stage.tests ? stage.tests.find(exam => exam.idSkill === idSkill && exam.idTool === tool.id) : null;\n            let level = ELevel.BREAKTHROUGH;\n            if(test){\n                level = test.level;\n            }else if(snapshot[idSkill] && snapshot[idSkill][tool.id]){\n                level = snapshot[idSkill][tool.id];\n            }\n            tool.level = level;\n        });\n        return skill as unknown as ISkill;\n    }\n\n    const toolById = (idSkill:string, idTool:string) => {\n        const skill = skills.find((skill) => skill.id === idSkill) || { tools:[] };\n        return skill.tools.find(tool => tool.id === idTool) || {} as ITool;\n    };\n\n    return (\n        <>\n            <Paper square style={{flexGrow:1}}>\n                <Tabs\n                    value={selectedSkill}\n                    onChange={(event, newValue) => {\n                        if(newValue !== selectedSkill){\n                            setSelectedSkill(newValue);\n                        }\n                    }}\n                    color=\"inherit\"\n                    variant=\"fullWidth\"\n                    centered\n                >\n                    {\n                        skills.map((skill, index) => (\n                            <Tab \n                                key={skill.id} \n                                label={skill.name}\n                                value={skill.id}\n                                icon={\n                                    <Icon color=\"action\" fontSize=\"small\">{icons[index]}</Icon>\n                                } \n                            />))\n                    }\n                </Tabs>\n            </Paper>\n            <List>\n                {\n                    skillById(selectedSkill).tools.map((tool, index) => (\n                        <ExamForm.Test\n                            onChange={setTestItem}\n                            idSkill={selectedSkill}\n                            idTool={tool.id}\n                            toolName={toolById(selectedSkill, tool.id).description}\n                            level={tool.level as ELevel}\n                            key={`${tool.id}_${examCount}_test`}\n                            levels={levels}\n                        />\n                    ))\n                }\n            </List>\n        </>\n    );\n}\n\nconst Test:StateTestComponent = ({toolName, levels, level, onChange, idSkill, idTool}) => {\n    const [selectedLevel, setLevel] = useState(level);\n\n    const handleChangeLevel = ({target}: any) => {\n        const value = Number(target.value || selectedLevel);\n        setLevel(value);\n        onChange(value, idSkill, idTool);\n    };\n\n    return (\n        <>\n            <ListItem alignItems=\"flex-start\">\n                <Box display=\"flex\" flexDirection=\"row\" flexGrow={1} flexWrap=\"wrap\">\n                    <Typography style={{ width: '100%' }}>\n                        {toolName}\n                    </Typography>                        \n                    {levels.map(\n                        (level, index) => (\n                            <Checkbox\n                                key={`_${index}`}\n                                title={level}\n                                icon={\n                                    <Icon color=\"action\" fontSize=\"small\">star_border</Icon>\n                                } \n                                checkedIcon={\n                                    <Icon style={{color:'#ea9f1d'}} fontSize=\"small\">star</Icon>\n                                }\n                                checked={selectedLevel >= index}\n                                value={index}\n                                onChange={handleChangeLevel}\n                            />\n                        )\n                    )}\n                    <Typography variant=\"overline\" color=\"textSecondary\" style={{ width: '100%' }}>\n                        {ELevel[selectedLevel]}\n                    </Typography>\n                </Box>\n            </ListItem>\n            <Divider variant=\"fullWidth\" component=\"li\" />\n        </>\n    );\n}\n\nExamForm.Test = Test;\nExamAdd.Head = Head;\n\nexport default ExamAdd;\n","import React from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {Sign, useSign} from './stores/SignStore';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport QRCode from './qrcode/QRCode';\nimport UserProfile from './user-profile/UserProfile';\nimport ExamAnalysis from './exam-analysis/ExamAnalysis';\nimport ExamAdd from './exam/ExamAdd';\nimport { Skill, useSkill } from './stores/SkillStore';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <div className=\"App\">\n        <Skill.Provider value={useSkill()}>\n          <Sign.Provider value={useSign()}>\n            <Sign.Consumer>\n              {({idUser}) => (\n                <>\n                {!!idUser ? (\n                    <Router>\n                      <Switch>\n                        <Route path=\"/\" exact render={() => <Redirect to=\"/exam-analysis\"/>} />\n                        <Route path=\"/user-profile\" exact render={() => <UserProfile idUser={idUser} />} />\n                        <Route path=\"/exam-analysis\" exact render={() => <ExamAnalysis idUser={idUser} />} />\n                        <Route path=\"/qr-code/url/:url\" render={({match:{params}}) => <QRCode url={`${decodeURIComponent(params.url)}`} />} />\n                        <Route path=\"/exam/add\" component={ExamAdd} />\n                        <Route path=\"/exam/edit/:id\" render={({match:{params}}) => <ExamAdd idExam={params.id} />} />\n                      </Switch>\n                    </Router>  \n                ) : (\n                  <LinearProgress />\n                )}\n                </>\n              )}\n            </Sign.Consumer>\n        </Sign.Provider>\n        </Skill.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}